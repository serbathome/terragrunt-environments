
name: provision-nonprod

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy it'
        required: false
        type: 'boolean'
        default: false
      service:
        description: 'Service to provision'
        required: true
        type: 'choice'
        default: 'all'
        options:
          - 'all'
          - 'webapp'
          - 'storage_account'
      environment:
        description: 'Environment to provision'
        required: true
        type: 'choice'
        default: 'all'
        options:
          - 'all'
          - 'dev'
          - 'test'
          - 'uat'

jobs:
  provision-nonprod-job:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      ENVS: "dev test uat"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Install Terraform
      - name: Install Terraform
        run: |
          wget -q https://releases.hashicorp.com/terraform/1.7.4/terraform_1.7.4_linux_amd64.zip
          unzip terraform_1.7.4_linux_amd64.zip
          chmod +x terraform
          sudo mv terraform /usr/local/bin/terraform

      # Install terragrunt
      - name: Install Terragrunt
        run: |
          wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v0.55.11/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Run terragrunt provision
      - name: Terragrunt Provision
        run: |
          # Provision all services in all environments
          if [[ ${{ github.event.inputs.destroy }} == "true" && ${{ github.event.inputs.service }} == "all" && ${{ github.event.inputs.environment }} == "all" ]]; then
            cd environments
            terragrunt run-all destroy -auto-approve -terragrunt-non-interactive
          fi
          if [[ ${{ github.event.inputs.destroy }} == "false" && ${{ github.event.inputs.service }} == "all" && ${{ github.event.inputs.environment }} == "all" ]]; then
            cd environments
            terragrunt run-all apply -auto-approve -terragrunt-non-interactive
          fi
          # Provision all services in a specific environment
          if [[ ${{ github.event.inputs.destroy }} == "true" && ${{ github.event.inputs.service }} == "all" && ${{ github.event.inputs.environment }} != "all" ]]; then
            cd environments/${{ github.event.inputs.environment }}
            terragrunt run-all destroy -auto-approve -terragrunt-non-interactive
          fi
          if [[ ${{ github.event.inputs.destroy }} == "false" && ${{ github.event.inputs.service }} == "all" && ${{ github.event.inputs.environment }} != "all" ]]; then
            cd environments/${{ github.event.inputs.environment }}
            terragrunt run-all apply -auto-approve -terragrunt-non-interactive
          fi
          # Provision a specific service in all environments
          environments=($ENVS)
          base_path=`pwd`
          if [[ ${{ github.event.inputs.destroy }} == "true" && ${{ github.event.inputs.service }} != "all" && ${{ github.event.inputs.environment }} == "all" ]]; then
            for environment in "${environments[@]}"; do
              cd $base_path/environments/${environment}/${{ github.event.inputs.service }}
              terragrunt destroy -auto-approve -terragrunt-non-interactive
            done
          fi
          if [[ ${{ github.event.inputs.destroy }} == "false" && ${{ github.event.inputs.service }} != "all" && ${{ github.event.inputs.environment }} == "all" ]]; then
            for environment in "${environments[@]}"; do
              cd $base_path/environments/${environment}/${{ github.event.inputs.service }}
              terragrunt apply -auto-approve -terragrunt-non-interactive
            done
          fi
          # Provision a specific service in a specific environment
          if [[ ${{ github.event.inputs.destroy }} == "true" && ${{ github.event.inputs.service }} != "all" && ${{ github.event.inputs.environment }} != "all" ]]; then
            cd environments/${{ github.event.inputs.environment }}/${{ github.event.inputs.service }}
            terragrunt destroy -auto-approve -terragrunt-non-interactive
          fi
          if [[ ${{ github.event.inputs.destroy }} == "false" && ${{ github.event.inputs.service }} != "all" && ${{ github.event.inputs.environment }} != "all" ]]; then
            cd environments/${{ github.event.inputs.environment }}/${{ github.event.inputs.service }}
            terragrunt apply -auto-approve -terragrunt-non-interactive
          fi

          

